version: 2.1

jobs:
  build:
    working_directory: ~/elmish

    docker:
    - image: circleci/node:10.15.3-stretch

    parallelism: 1

    steps:
    - install-libsysconfcpus
    - checkout: { path: "~/elmish" }

    - restore_cache:
        keys:
          - elmish-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "bower.json" }}
          - elmish-v1-{{ .Branch }}-

    - run: npm install && sysconfcpus -n 2 npm run build

    - save_cache:
        key: elmish-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "bower.json" }}
        paths:
          - bower_components
          - node_modules
          - output
          - ~/.cache

commands:
  # Compilers such as `purs` (and Elm) try to leverage maximum parallelism by running on all
  # available CPUs. Unfortunately, CircleCI reports the number of host OS CPUs instead of the number
  # of available ones in our container. We use `libsysconfcpus` to limit the number of CPUs tools
  # such as `purs` will utilize, to optimize our build time. See:
  # https://github.com/elm/compiler/issues/1473
  install-libsysconfcpus:
    steps:
      - restore_cache:
          keys:
            - libsysconfcpus-{{ .Branch }}
            - libsysconfcpus-master
      - run:
          name: Build sysconfcpus
          command: >
            if [ ! -d ~/libsysconfcpus ]; then
              cd ~;
              buildDir=pwd;
              git clone https://github.com/obmarg/libsysconfcpus.git;
              cd libsysconfcpus;
              git checkout 8cb9da6602;
              ./configure;
              sudo make;
            fi
      - save_cache:
          key: libsysconfcpus-{{ .Branch }}
          paths:
            - ~/libsysconfcpus
      - run:
          name: Install sysconfcpus
          command: >
            cd ~/libsysconfcpus;
            sudo make install;
